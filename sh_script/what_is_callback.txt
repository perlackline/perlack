[Callback (computer programming)]
https://en.wikipedia.org/wiki/Callback_(computer_programming)

In computer programming, a callback is a piece of executable code that is passed as an argument to other code, which is expected to call back (execute) the argument at some convenient time. The invocation may be immediate as in a synchronous callback, or it might happen at a later time as in an asynchronous callback. In all cases, the intention is to specify a function or subroutine as an entity that is, depending on the language, more or less similar to a variable.

コンピュータ・プログラミングで, コールバックは 実行可能なコードの一部です 引数として渡される 他のコードに, これは期待されています 引数をコール バック ( 実行 ) することを いずれ都合のよい時に. 呼び出しは 即時かもしれません 同期コールバックとして, または 後で起こるかもしれません 非同期コールバックとして. すべてのケースで, 目的は 指定することです ファンクションかサブルーチンを つまり存在 ( entity ) として,  言語に依存しますが, 多かれ少なかれ変数と同じです. 

Programming languages support callbacks in different ways, often implementing them with subroutines, lambda expressions, blocks, or function pointers.

プログラミング言語は サポートします コールバックを 異なる方法で, 多くの場合実装します サブルーチン, ラムダ式, ブロック, または関数ポインタで.

[Design]

There are two types of callbacks, differing in how they control data flow at runtime: blocking callbacks (also known as synchronous callbacks or just callbacks) and deferred callbacks (also known as asynchronous callbacks). While blocking callbacks are invoked before a function returns (in the C example below, which illustrates a blocking callback, it is function main), deferred callbacks may be invoked after a function returns. Deferred callbacks are often used in the context of I/O operations or event handling, and are called by interrupts or by a different thread in case of multiple threads. Due to their nature, blocking callbacks can work without interrupts or multiple threads, meaning that blocking callbacks are not commonly used for synchronization or delegating work to another thread.

ふたつのタイプがあります コールバックの, 異なる どのようにそれらデータフローをコントロールするか 実行時に: ブロッキングコールバック (  また 知られています 同期コールバックまたは 単にコールバックとして) それと 遅延コールバック ( また 知られています 非同期コールバックとして ). ブロッキングコールバックでは 呼びだされます ファンクションが戻る前に ( C の例では 以下の, 示しています ブロッキングコールバックを, それは ファンクションです メインの), 遅延コールバックは 呼び出されるはずです ファンクションが戻った後で. 遅延コールバックは 多くの場合利用されます 文脈で I/O の操作 または イベントハンドリングの, それと 呼ばれます 割り込み または 異なるスレッドで 複数スレッドの場合. その性質により, ブロッキングコールバックは 動作できます 割り込みや 複数スレッドなしに, 意味します ブロッキングコールバックは 一般的に利用されないことを 同期または 動作の委任に 他のスレッドへの.

allbacks are used to program applications in windowing systems. In this case, the application supplies (a reference to) a specific custom callback function for the operating system to call, which then calls this application-specific function in response to events like mouse clicks or key presses. A major concern here is the management of privilege and security: whilst the function is called from the operating system, it should not run with the same privilege as the system. A solution to this problem is using rings of protection.

コールバックは利用されます アプリケーションのプログラムに ウィンドウシステムの. この場合, アプリケーションは提供します ( 参照して ) 特定のカスタムコールバックファンクションを オペレーティングシステムの 呼び出して, これは それから呼び出します このアプリケーション特有のファンクションを 応答して イベントに マウスクリックやキー押下のような.  大きな関心は ...



[Use]
 3.1 JavaScript
 3.2 C
 3.3 Python
 3.4 Lua
[See also]
[References]
[External links]
