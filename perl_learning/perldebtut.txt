Perl デバッガ チュートリアル
http://perldoc.jp/docs/perl/5.10.0/perldebtut.pod

#// Perl の文法チェック

---
perl -c programfiles
programfiles syntax ok
---

#// デバッガで利用するコード

---
#!/usr/bin/perl
use strict;

my $key = 'wilcome';
my %data = (
      'this' => qw(that),
      'tom'  => qw(and jerry),
      'welcome' => q(Hello World),
      'zip'  => q(welcome),
);
my @data = keys %data;

print "All OK\n" if grep($key, keys %data);
print "$data{$key}\n";
print "done: '$data{$key}'\n";
exit;
---

#// デバッガを終了する

---
>q
---

#// ヘルプを表示する

簡易ヘルプ
---
>h
---

簡易ヘルプをページャ (more や less) に渡す
---
>|h
---

ヘルプ
---
>h h
---

ヘルプをページャに渡す
---
>|h h
---

つまり「 | 」は、デバッガコマンドの結果をページャに渡す。

#// 読み込まれたモジュールとバージョン番号を表示する

---
>M
---

#// 読み込まれたメソッドを表示する

---
>m
---

#// すべてのサブルーチンを表示する

---
>S
---

#// パッケージ内の変数をデータプリティプリンタで表示する

パッケージのを指定しない場合のデフォルトは main。デバッグをシングルステップで進めて別のパッケージ ( モジュール ) 内にいる場合は、当該モジュールがデフォルトになる。

---
>V
---

main 内の変数を指定する。例えば「 %ENV 」。指定する場合シジル ($, @ などの型識別子) は省く。

---
>V main ENV
---


パッケージ名 (モジュール名) を指定する。例えば「 File::Spec 」。

---
>V File::Spec
---

パッケージ ( モジュール )「 File::Spec 」のスカラ変数「 $VERSION 」を指定する。

---
>V File::Spec VERSION
---

「 X 」は、「 V 」のパッケージ名を指定しないコマンド。パッケージ名はデフォルトが自動的に選択される。

---
>X
---

変数を指定する。

---
>X INC
---

#// 現在の行周辺のコードを確認する。

---
>v
---

「 v 」を押下するたびに次のコードを表示する。

#// 任意の行を確認する

---
>l
---

#// 実行行に戻る

---
>.
---

#// 次に実行可能な文に進む

---
>s
---

#// 変数に格納された値を見る

---
>p $key
---

#// 1 回限りのブレークポイントを指定してそこに移動する

行で指定する。
---
>c 13
---

サブルーチンで指定する。
---
>c subroutine
---

パッケージ (モジュール) の中のサブルーチンを指定する。例えばモジュール「 File::Temp 」のサブルーチン「 tempfile 」を指定する。

---
>c File::Temp::tempfile
---

#// ハッシュ変数の中身を見る

データ構造へのリファレンスを利用すると中身がわかりやすい。

確認のためのプログラムコード内のハッシュ変数「 %data 」を確認すると次のように出力される。
---
>x \%data
0  HASH(0x8d8f58)
   'Hello World' => 'zip'
   'jerry' => 'welcome'
   'this' => 'that'
   'tom' => 'and'
   'welcome' => undef
---

「 x 」は、ネストしたリファレンスから完全なオブジェクト、オブジェクトの一部まで楽しくダンプする。

「 x 」は、数値 N で深度 ( maxdepth ) を指定可能。

---
>x 1 \%data
0  HASH(0x8d8f58)
---
---
>x 2 \%data
0  HASH(0x8d8f58)
   'Hello World' => 'zip'
   'jerry' => 'welcome'
   'this' => 'that'
   'tom' => 'and'
   'welcome' => undef
---

#// 簡単なオブジェクトを作るためにデバッガを起動

標準入力「 STDIN 」から入力を受け付けるデバッガを、シェルのコマンドライン上で起動。

オプションの「 -d 」はデバッガの機動、「 -e 」はワンライナーで Perl を実行するためのオプション。

引数の「 0 」は、この後のデバッガに進むための無害な値として指定。

---
$ perl -de 0

Loading DB routines from perl5db.pl version 1.32
Editor support available.

Enter h or `h h' for help, or `man perldebug' for more help.

main::(-e:1):	0
  DB<1> 
---

#/ オブジェクトを構築

複数行にかき分ける場合の行末の「 \ 」に注意。

---
main::(-e:1):	0
  DB<1> $obj = bless ({'unique_id'=>'123', 'attr'=>\
  cont:   { 'col' => 'black', 'things'=>[qw(this that etc)]}}, 'MY_class')
---

#// コマンド「 x 」でオブジェクトの中身を確認

---
  DB<2> x $obj
0  MY_class=HASH(0x124a528)
   'attr' => HASH(0x124a4c8)
      'col' => 'black'
      'things' => ARRAY(0xe2abe8)
         0  'this'
         1  'that'
         2  'etc'
   'unique_id' => 123
---

#// 配列にデータを格納

---
  DB<4> @data = qw(this that the other atheism leather theory scythe)
---

#// 正規表現などを利用して「 p 」で出力

---
  DB<5> p 'saw -> '.($cnt += map { print "\t:\t$_\n"} grep(/the/, sort @data))
	:	atheism
	:	leather
	:	other
	:	scythe
	:	the
	:	theory
saw -> 6
---

#// コマンド履歴を「 H 」で確認する

---
  DB<6> H
5: p 'saw -> '.($cnt += map { print "\t:\t$_\n"} grep(/the/, sort @data))
4: @data = qw(this that other atheism leather theory scythe)
3: x \$obj
2: x $obj
1: $obj = bless ({'unique_id'=>'123', 'attr'=>
  { 'col' => 'black', 'things'=>[qw(this that etc)]}}, 'MY_class')
---

#// 以前利用したコマンドを利用する

「 H 」で確認した履歴から番号と「 ! 」を利用してコマンドを再利用する。Uinx 系システムのコマンド「 history 」と同じ利用方法。

---
  DB<6> !5
p 'saw -> '.($cnt += map { print "\t:\t$_\n"} grep(/the/, sort @data))
	:	atheism
	:	leather
	:	other
	:	scythe
	:	theory
saw -> 10
---

#// 摂氏と華氏を変換するプログラム

これは何らかの問題を抱えている。

---
#!/usr/bin/perl -w
use strict;

my $arg = $ARGV[0] || '-c20';

if ($arg =~ /^\-(c|f)((\-|\+)*\d+(\.\d+)*)$/) {
    my ($deg, $num) = ($1, $2);
    my ($in, $out) = ($num, $num);
    if ($deg eq 'c') {
        $deg = 'f';
        $out = &c2f($num);
    } else {
        $deg = 'c';
        $out = &f2c($num);
    }
    $out = sprintf('%0.2f', $out);
    $out =~ s/^((\-|\+)*\d+)\.0+$/$1/;
    print "$out $deg\n";
} else {
    print "Usage: $0 -[c|f] num\n";
}
exit;

sub f2c {
      my $f = shift;
      my $c = 5 * $f - 32 / 9;
      return $c;
}

sub c2f {
      my $c = shift;
      my $f = 9 * $c / 5 + 32;
      return $f;
}
---

#// プログラムの実行結果

計算があわない。

摂氏から華氏はおよそ問題ない。
---
> program -c0.72
33.30 f
---

華氏から摂氏はなにかがおかしい。
---
> program -f33.3
162.94 c
---

#// ブレークポイントの挿入

プログラムの 9 行目にブレークポイントを仕込む。

---
  8     my ($in, $out) = ($num, $num);
  9     $DB::single=2 # insert at line 9! it's break point.
 10     if ($deg eq 'c') {
---

#// 引数を指定しつつデバッガと共にプログラムを起動する

華氏から摂氏への変換がおかしいため引数には華氏を指定する。

---
> perl -d program -f33.3
Loading DB routines from perl5db.pl version 1.32
Editor support available.

Enter h or `h h' for help, or `man perldebug' for more help.

main::(perldebtut2.pl:4):	my $arg = $ARGV[0] || '-c20';
  DB<1> 
---

#// 「 c 」でブレークポイントまで進み現在の場所を「 v 」で確認する

デバッグのコマンド「 c 」はプログラムの続きを実行する。ブレークポイントがあればそこで停止する。

---
  DB<1> c
main::(perldebtut2.pl:10):	    if ($deg eq 'c') {
---

「 v 」で周辺のコードを確認する。

---
  DB<1> v
7:	    my ($deg, $num) = ($1, $2);
8:	    my ($in, $out) = ($num, $num);
9:	    $DB::single=2; # insert at line 9! it's break point.
10==>	    if ($deg eq 'c') {
11:	        $deg = 'f';
12:	        $out = &c2f($num);
13 	    } else {
14:	        $deg = 'c';
15:	        $out = &f2c($num);
16 	    }
---

#// 「 p 」で現在利用している値を表示

---
 DB<1> p $deg, $num
f33.3
---

#// 「 b 」を利用して即興のブレークポイントを指定する。

コマンド「 b 」に行番号を与えるとその直前にブレークポイントを設定できる。ここでは、サブルーチン「 f2c 」から帰ってきた直後の行「 L.17 」に設定する。

---
  DB<2> b 17
---

「 b 」には行番号とともに条件式を設定できる。例えばスカラ変数「 $x 」の値が数値「 30 」よりも大きい場合にのみ停止する ( この時 if は不要 )。

---
  DB<2> b 17 $x > 30
---

「 b 」は他にもサブルーチン名を指定する等多様な設定が可能。

「 B line 」で指定した行,「 B * 」ですべてのブレークポイントを削除可能 (v5.6.1 以前 ? では d と D を利用)。

#// 「 L 」でブレークポイントを確認する

設定したブレークポイントはコマンド「 L 」でリストアップ可能。「 L 」は他に「 アクション 」や「 ウォッチ式 」と呼ばれるものもリストする。

---
  DB<3> L
perldebtut2.pl:
 17:	    $out = sprintf('%0.2f', $out);
   break if (1)
  DB<3> 
---

#// 「 c 」に名前を指定して任意のサブルーチンの中に進む

「 c 」の引数で「 f2c 」を指定するとサブルーチン「 f2c 」の中に進む。それから「 v 」を利用してコードを確認。

---
  DB<3> c f2c
main::f2c(perldebtut2.pl:26):	      my $f = shift;
  DB<4> v
23:	exit;
24 	
25 	sub f2c {
26==>	      my $f = shift;
27:	      my $c = 5 * $f - 32 / 9;
28:	      return $c;
29 	}
30 	
31 	sub c2f {
32:	      my $c = shift;
---

#// 「 c 」に行番号を指定して任意の行まで進む

サブルーチン「 f2c 」が終了する直前の行「 L.28 」に移動する。

---
  DB<4> c 28
main::f2c(perldebtut2.pl:28):	      return $c;
---

#// 戻り値を確認する

サブルーチンから return される値「 $c 」を確認する。

---
  DB<5> p $c
162.944444444444
---

#// 即興で計算式を確認する

「 p 」を利用してデバッグ中に即興で計算式を確認する。

まずはコードに記述した式を確認。

---
  DB<6> p (5 * $f - 32 / 9)
162.944444444444
---

演算子の優先順位が疑わしいのでいくつか試してみる。

---
  DB<7> p 5 * $f - (32 / 9)
162.944444444444
  DB<8> p (5 * $f) - 32 / 9
162.944444444444
  DB<9> p 5 * ($f - 32) / 9
0.722222222222221
---

#// デバッグ中に値を変更して処理を進める

サブルーチンの戻り値のスカラ変数「 $c 」に対してほぼ正確な値を即興でセットして処理を進める。

---
  DB<10> $c = 5 * ($f - 32) / 9
---

#// 「 r 」でサブルーチンから戻るまでを実行する

コマンド「 r 」でサブルーチンから戻るまでを実行する。通常は「 printRet 」がセットされているので併せて戻り値をダンプする。

---
  DB<11> r
scalar context return from main::f2c: 0.722222222222221
main::(perldebtut2.pl:17):	    $out = sprintf('%0.2f', $out);
---

#// プログラムを最後まで進める

サブルーチンから戻ったら「 c 」でプログラムを最後まで進める。

---
  DB<11> c
0.72 c
Debugged program terminated.  Use q to quit or R to restart,
  use o inhibit_exit to avoid stopping after program termination,
  h q, h R or h o to get additional info.  
---

最後に「 q 」でデバッガを終了し実際のプログラムコードを修正します。

#// 「 a 」でアクションを設定する

コマンド「 a 」は「 アクション 」を設定する。

---
my $count = 0;



#// w, t, T のためのプレースホルダ


アクション、変数の監視、スタックトレースなど:
http://perldoc.jp/docs/perl/5.10.0/perldebtut.pod












