ファイルハンドル

#// 古い方法

裸のワード x 2 引数
---
open LOG_FH, '>> text.file'
    or die "Could not open file: $!";
---

サンプルサブルーチン
---
sub log_message {
  # シンボルテーブルのパッケージ変数を操作することになり
  # my は使えないので local を使う
  local *FH = shift;
  print FH @_, "\n";
}


型グロブを引数に指定
---
# *LOG_FH = *main::LOG_FH
log_message( *LOG_FH, "use type-glob" );
---

グロブリファレンスを引数に指定
---
# \*LOG_FH = GLOB(0x126e700)
log_message( \*LOG_FH, "use globref" );
---
---------------------------------
---------------------------------
---------------------------------
#// 改良されたスカラを利用する方法

---
my $file = 'text';
open my $log_fh, ">>", $file or die "could not open $file: $!";

# GLOB(0x1c6a160)
print $log_fh, "\n";
---

スカラにはグロブレフ (= シンボリックリファレンス?) が格納される.

3 引数の open なら Perl IO フィルタにアクセス出来る !

---------------------------------
---------------------------------
---------------------------------
#// IO::Handle

Perl はファイルを open する際に、裏では IO::Handle モジュールを利用していて、実のところ、ファイルハンドルスカラは、内部的に IO::Handle モジュールのオブジェクトとして扱われている。

そのため、print 文のファイルハンドルの後にはカンマを必要としない。なぜなら、これは「 間接オブジェクト記法 」だから。

---
# 間接オブジェクト記法
print $fh "output line\n";
---
は
---
$fh->print("output line\n");
---
と同じ。

ファイルハンドルスカラは、表向きグロブ。
---
print $fh;

# GLOB(0x16e1160)
---


モジュール IO::Handle は、入出力全般の基底クラスなので、ファイルに限らず多くの入出力を処理できるが、直接利用せず用途に合わせた派生モジュール ( IO::* ) を利用する。

通常ファイルの入出力は IO::File を利用する。


---
Perl 「 モジュール 」 CGI.pm フォーム ファイルアップロードの基本処理 (0x109)
Perl 「 モジュール 」 CGI 実用的なファイルアップロード 11 アップロードの処理 破 (0x118)
---

CGI.pm の upload() は、軽量ファイルハンドル ( オブジェクト) を返すが、このファイルハンドルは IO::Handle の派生クラスにないため、他のモジュールとの相互運用時に問題がおこる場合がある。このため、次のように handle() を利用して IO::Handle 互換のファイルハンドルを取得する。

http://perldoc.jp/docs/modules/CGI-3.49/CGI.pod#FORM32ELEMENTS
---
my $lightweight_fh = $q->upload('field name');
# Upgrade the handle to one compatible with IO::Handle:
my $io_handle = $lightweight_fh->handle;
---

Perl リファレンス 16 データ構造 複雑なレコード (d019)


