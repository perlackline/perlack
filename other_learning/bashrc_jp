# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples
# ---
# ~/.bashrc: non-login シェルのために bash(1) によって実行される
# 参照する /usr/share/doc/bash/example/startup-files (バッケージ bash-doc の) 例のために

# If not running interactively, don't do anything
# ---
# もしインタラクティブで実行していないなら, 何もしない
case $- in
    # i を含むならそのまま進む
    *i*) ;;
    # i を含まないならスクリプトを出て何もしない
      *) return;;
esac

# $- => shell に現在セットされているオプション (flag? switch?)
# eg. himBH
# h  => "hash all bash" 問い合わせによって見つけたコマンドの位置を覚えておく
# i  => shell をインタラクティブで起動する
# m  => "monitor" ジョブコントロールを有効にする
# B  => "brace expand" ブレース展開を有効にする
# H  => "history expand" 番号の前に ! をおくことでヒストリからのコマンドの再実行を可能にする

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
# ---
# 置かない 重複する行 or 空白ではじまる行を history に.
HISTCONTROL=ignoreboth

# ignoreboth => ignorespcae && ignoredups

# append to the history file, don't overwrite it
# ---
# ヒストリファイルに追加する, それを上書きしない
shopt -s histappend

# shopt      => shell オプションで指定可能な動作の値をトグルさせる bash の組み込みコマンド
# -s         => オプションを有効化
# histappend => シェルが exit するときに HISTFILE で設定したファイル名にヒストリリストを上書きではなく追加する

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
# ---
# ヒストリの長さの設定 bash(1) の HISTSIZE と HISTFILESIZE を参照
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
# ---
# 各コマンドの後のウィンドウサイズをチェックして, もし必要なら,
# LINES と COLUMNS の値をアップデートする
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
# ---
# セットすると, パターン "**" がパスネーム展開のコンテキストですべてのファイルと
# ゼロ以上のディレクトリ, サブディレクトリにマッチするように使われる.
# (# 直後に / を置くとディレクトリ, サブディレクトリのみにマッチする)
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
# ---
# 非テキストの入力ファイルのために less をより親切にする, 参照 lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# [ -x /usr/bin/lesspipe ]         => lesspipe を実行するテスト
# eval "$(SHELL=/bin/sh lesspipe)" =>  lesspipe を実行して sh の環境変数に LESSOPEN, LESSCLOSE を設定する

# set variable identifying the chroot you work in (used in the prompt below)
# ---
# あなたが work している chroot を識別する変数をセットする (以下の prompt で使う)

# 変数 ${debian_chroot} が空でファイル /etc/debian_chroot が読み取り可能なら (デフォルトでは存在しない)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    # /etc/debian_chroot の記述を debian_chroot にセットする
    debian_chroot=$(cat /etc/debian_chroot)
fi

# -z STRING          => STRING の長さがゼロなら true (see man [ or test(1))
# ${parameter:-word} => デフォルト値を使う. もし parameter がセットされてないか null なら, word の展開が, そうでないなら parameter の値が代用される
# -r FILE            => ファイルが存在し読み取り権限が与えられていたら true (see man [ or test(1))

# set a fancy prompt (non-color, unless we know we "want" color)
# ---
# ファンシーな prompt をセットする (求めるカラーを知らない場合は非カラー)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
# ---
# もしターミナルが機能を持っているなら, 色付き prompt のためにアンコメントする;
# ユーザを紛らわせないためにデフォルトではオフになっている:
# ターミナルウィンドウでのフォーカスは prompt ではなくコマンドの出力になるはず
#force_color_prompt=yes

# -n STRING => STRING の長さが非ゼロなら true
if [ -n "$force_color_prompt" ]; then

    # tput が実行できて tput setaf 1 が動くなら
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then

    # -x FILE      => ファイルが存在して実行 (or 検索) 権限が与えられている 
    # tput         => tarminal or query terminfo データベースを初期化する (see man tput) (?) エスケープシーケンスのラッパー ?
    # setaf        => (set_a_foreground) ANSI エスケープを使ってフォアグランドカラーを #1 にセットする (see man terminfo(5))
    # tput setaf 1 => ターミナルのフォアグランドカラーを 1 (赤) にセットする
    # >&/dev/null  => stdout, stderr を /dev/null 行きにする, >&WORD, &>WORD は同じで, >WORD 2>&1 と同じ.
    # &>WORD では WORD が数字 or - に展開されないかもしれないので man では >&WORD が好ましいとされている　(see "Redirecting Standard Output and Standard Error" in man bash(1))

    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    # ---
    # 色をサポートする; それは Ecma-48 (ISO/IEC-6429) に準拠していると仮定する.
    # (サポートの欠如はかなりまれで, そうしたケースでは setaf ではなく setf をサポートする傾向がある.)

        # 色をサポートする準備
	color_prompt=yes
    else
	# tput が使えない場合
	color_prompt=
    fi
fi

# color_prompt が yes なら
if [ "$color_prompt" = yes ]; then

    # プライマリ prompt  (PS1) の文字列を色付きでセット
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '

    # PS1        => プライマリ prompt の文字列に使う文字列をセットする
    # デフォルト => PS1 のデフォルト値 => \s-\v\$ => シェル名-version of bash$(or # ) => eg. bash-2.00$
    # \033[      => エスケープシーケンスの開始を意味する (bash では \e[ や \x1B と同じで <Esc>[ を表す) 
    # <Esc>[FormatCodem でエスケープシーケンスを指定 (末尾の m はターミネータ)
    # \[...\]    => 非表示の文字を囲むデリミタ

    # '\[\033[01;32m\]\u@\h[\033[00m\]:\[\033[01;34m\]\w[\033[00m\]\$ '
    # \[\033[ => エスケープシーケンス開始
    # 01      => 太字
    # 32      => 緑
    # m\]     => ターミネータ (エスケープシーケンス終了)
    # \u      => ユーザ名
    # @       => @
    # \h      => 最初の . までのホスト名 (eg. host.name -> host)
    # \[\033[ => エスケープシーケンス開始
    # 00      => ノーマルテキスト
    # m\]     => ターミネータ (エスケープシーケンス終了)
    # :       => :
    # \[\033[ => エスケープシーケンス開始
    # 01      => 太字
    # 34      => 青
    # m\]     => ターミネータ (エスケープシーケンス終了)
    # \w      => 現在のワーキングディレクトリ ($HOME は ~ で省略, \W は basename のみ)
    # \[\033[ => エスケープシーケンス開始
    # 00      => ノーマルテキスト
    # m\]     => ターミネータ (エスケープシーケンス終了)
    # \$      => 実行 (effective) UID が 0 なら #, それ以外は $

# color_promt が yes ではないなら
else

    # シンプルな文字列をセット
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '

    # \u => ユーザ名
    # @  => @
    # \h => ホスト名
    # :  => :
    # \w => ワーキングディレクトリ ($HOME は ~ で省略)
    # \$ => 実行 (effective) UID が 0 なら #, それ以外は $
    # eg. user@host:~/where/do/I/work$ 

fi
# 値をアンセット
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
# ---
# もしこれが xterm ならタイトルを user@host:dir にセットする
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"

    # \e]0;FOO\a => xterm のウィンドウのタイトルとアイコンを FOO にセットする
    # \e]0;      => タイトル文字列スタート
    # \a         => タイトル文字列エンド (ASCII BEL) 
    # 末尾 $PS1  => 上で設定した prompt の文字列を改めてセット

    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
# ---
# ls の色のサポートを有効にする, 便利なエイリアスを追加する

# /usr/bin/dircolors が実行可能なら
if [ -x /usr/bin/dircolors ]; then

# /usr/bin/dircolors => ls のカラー設定を行うコマンド (see man dircolors(1))

    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    # ~/.dircolors が読み込み可能 (-r) なら bash 形式 (-b) で ~/.dircolors を読み取る (eval)
    # または dircolors -b を実行 (eval) して bash 形式で LS_COLORS をセット

    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
# --
# 色付きの GCC 警告とエラー
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
# もう少し ls のエイリアス
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
# ---
# 長時間実行しているコマンドのために "alert" エイリアスを追加する. このように使う:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# notify-send   => デスクトップ通知を送るプログラム
# --urgency=low => 緊急度を low に指定する
# -i            => アイコンファイル名を指定する or ストックアイコンを表示する
# $?            => 直前のコマンドの終了ステータス (0 = 正常, 他 = 異常終了)
# [ $? = 0 ]    => $? が 0 なら (test の [ ] の中で = はイコール (代入ではなく))
# echo terminal => stdout に文字列 terminal を出力 (alert のアイコンを指定する)
# || echo error => または stdout に文字列 error を出力

# history | tail -n1 => コマンドヒストリの末尾 1 行を出力
# sed -e => sed でスクリプトを実行
# '\''   => シングルクォート内でシングルクォートをエスケープして open のシングルクォートを配置
# s/^\s*[0-9]\+\s*//;
#        => history の出力から先頭の空白, 数値, 空白を削除 (eg. "905  echo foo" -> "echo foo")
# s/[;&|]\s*alert$//  
#        => 記号 ;, &, | のいずれかに続く空白と文字列 alert(行末) を削除 (eg. "echo foo; alert" -> "echo foo")
# '\''   => シングルクォート内でシングルクォートをエスケープして close のシングルクォートを配置

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
# ---
# エイリアスの定義.
# あなたが追加をここで直接追加する代わりに ~/.bash_aliases のような
# 別のファイルに置くことを望むなら.
# 参照 パッケージ bash-doc の /usr/share/doc/bash-doc/examples
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases

    # . => (ドット) ファイルを読み込んでカレント shell で実行する (POSIX で定義, コマンド source と等価) 
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
# ---
# プログラマブルな補完機能を有効にする (もし /etc/bash.bashrc と
# これをソースにした /etc/profile ですでに有効になっているなら
# これを有効にする必要はない).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
